model User {
  id               String             @id
  name             String
  email            String
  emailVerified    Boolean
  image            String?
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  UserProfile      UserProfile[]
  BoardFactionRole BoardFactionRole[]
  CommitteeMember  CommitteeMember[]
  File             File[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model UserProfile {
  id          String    @id
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  initials    String?
  firstName   String
  middleName  String?
  lastName    String
  dateOfBirth DateTime?
  phoneNumber String?
  street      String?
  city        String?
  postalCode  String?
  country     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user_profile")
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  key       String
  type      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("file")
}

model BoardFactionRole {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  type     RoleType // 'BOARD' | 'FACTION'
  function String // e.g., 'Chairperson', 'Secretary'
  year     Int // e.g., 2024

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("board_faction_role")
}

enum RoleType {
  BOARD
  FACTION
}

model Committee {
  id        String            @id @default(uuid())
  name      String
  members   CommitteeMember[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@map("committee")
}

model CommitteeMember {
  id          String    @id @default(uuid())
  userId      String
  committeeId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  committee   Committee @relation(fields: [committeeId], references: [id], onDelete: Cascade)

  function   String? // e.g., 'Treasurer'
  acceptedAt DateTime? // null if not accepted yet
  joinedAt   DateTime
  leftAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, committeeId])
  @@map("committee_member")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
